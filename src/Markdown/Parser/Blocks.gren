module Markdown.Parser.Blocks exposing ( RawBlock(..), parse, parseRaw, parser, rawBlockParser )

{-| Block-level parsers.

@docs parse, parseRaw, parser, rawBlockParser, RawBlock

-}

import Dict exposing ( Dict )
import Markdown.Block exposing ( Block(..) )
import Markdown.Inline exposing ( Html(..), Inline(..) )
import Markdown.Parser.Html as Html
import Markdown.Parser.Inlines
import Parser exposing (..)
import Parser.Extra exposing (..)
import Transmutable.Html as Html
import Transmutable.Html.Interior as Html
import Transmutable.Html.Parser as Html



-- 🌳


{-|-}
type RawBlock
    = RawBlock Block
    | RawBlockQuote String
    | RawFencedCode
        { body : String
        , language : Maybe String
        }
    | RawHeading
        { level : Int
        , string : String
        }
    | RawHtml Html
    | RawHtmlOpening Html.Opening
    | RawHtmlClosing Html.Closing
    | RawHtmlText String
    | RawIndentedCode String
    | RawOrderedList
        { leadingSpaces : Int
        , start : Int
        , symbol : String
        , rawListItems : Array (Array String)
        }
    | RawParagraph
        { closed : Bool
        , string : String
        }
    | RawThematicBreak
    | RawUnorderedList
        { leadingSpaces : Int
        , symbol : String
        , rawListItems : Array (Array String)
        }



-- 🛠️


{-| Parse blocks.
-}
parse : String -> Result (Array DeadEnd) (Array Block)
parse =
    Parser.run parser


{-| Parse blocks without parsing the inline elements.
-}
parseRaw : String -> Result (Array DeadEnd) (Array RawBlock)
parseRaw =
    Parser.run (loop [] rawBlockParser)



-- TOP-LEVEL PARSER


{-| Top-level block parser.
-}
parser : Parser (Array Block)
parser =
    map rawToBlocks (loop [] rawBlockParser)


rawToBlocks : Array RawBlock -> Array Block
rawToBlocks rawBlocks =
    { acc = []
    , remainder = rawBlocks
    }
        |> translateRaw
        |> .acc


translateRaw :
    { acc : Array Block
    , remainder : Array RawBlock
    }
    -> { acc : Array Block
       , remainder : Array RawBlock
       , closing : Maybe Html.Closing
       , end : Bool
       }
translateRaw { acc, remainder } =
    when Array.popFirst remainder is
        Just record ->
            translateRawElement acc record.first record.rest

        Nothing ->
            { acc = acc
            , remainder = []
            , closing = Nothing
            , end = True
            }


translateRawElement :
    Array Block
    -> RawBlock
    -> Array RawBlock
    -> { acc : Array Block
       , remainder : Array RawBlock
       , closing : Maybe Html.Closing
       , end : Bool
       }
translateRawElement acc rawBlock rest =
    let
        merge a mergeAcc =
            when a is
                Inline (Text "") ->
                    mergeAcc

                Inline (Text t) ->
                    when Array.popLast mergeAcc is
                        Just { last = Inline (Text lastText), initial } ->
                            Array.pushLast (Inline (Text (lastText ++ t))) initial

                        _ ->
                            Array.pushLast a mergeAcc

                _ ->
                    Array.pushLast a mergeAcc

        add a =
            addArray
                [ a
                ]

        addArray a =
            translateRaw
                { acc = Array.foldl merge acc a
                , remainder = rest
                }
    in
    when rawBlock is
        RawBlock block ->
            add block

        --
        -- BlockQuote
        --
        RawBlockQuote string ->
            string
                |> parse
                |> Result.withDefault []
                |> BlockQuote
                |> add

        --
        -- CodeBlock (fenced)
        --
        RawFencedCode { body, language } ->
            { body = body
            , language = language
            }
                |> CodeBlock
                |> add

        --
        -- Heading
        --
        RawHeading { level, string } ->
            string
                |> Markdown.Parser.Inlines.parse
                |> Result.withDefault []
                |> (\inlines -> Heading { level = level, inlines = inlines })
                |> add

        --
        -- HTML
        --
        RawHtml html ->
            html
                |> HtmlBlock
                |> add

        RawHtmlOpening opening ->
            Html.manageOpening
                { appendToPost = merge
                , manageNext = translateRaw
                , nodeCreator = \props blocks ->
                    HtmlBlockNode
                        { tagName = props.tagName
                        , attributes = props.attributes
                        , blocks = blocks
                        }
                , textCreator = Text >> Inline
                }
                { acc = acc
                , remainder = rest
                }
                opening


        RawHtmlClosing closing ->
            Html.manageClosing
                { acc = acc
                , remainder = rest
                }
                closing

        RawHtmlText string ->
            let
                trimmed =
                    String.trimLeft string
            in
            if String.startsWith "\n\n" string then
                string
                    |> parse
                    |> Result.withDefault
                            [ Inline (Text trimmed)
                            ]
                    |> addArray
            else
                add (Inline (Text trimmed))

        --
        -- CodeBlock (indented)
        --
        RawIndentedCode body ->
            { body = body
            , language = Nothing
            }
                |> CodeBlock
                |> add

        --
        -- OrderedLooseList & OrderedTightList
        --
        RawOrderedList { start, rawListItems } ->
            let
                listItems =
                    Array.map (String.join "\n") rawListItems

                isLooseList =
                    Array.any (\a -> Array.length a > 1) rawListItems

                block =
                    if isLooseList then
                        OrderedLooseList
                            { start = start
                            , blocks = Array.map (String.trim >> parse >> Result.withDefault []) listItems
                            }
                    else
                        OrderedTightList
                            { start = start
                            , inlines = Array.map (String.trim >> Markdown.Parser.Inlines.parse >> Result.withDefault []) listItems
                            }
            in
            add block

        --
        -- Paragraph
        --
        RawParagraph { string } ->
            string
                |> String.trimRight
                |> Markdown.Parser.Inlines.parse
                |> Result.withDefault []
                |> Paragraph
                |> add

        --
        -- ThematicBreak
        --
        RawThematicBreak ->
            add ThematicBreak

        --
        -- UnorderedLooseList & UnorderedTightList
        --
        RawUnorderedList { rawListItems } ->
            let
                listItems =
                    Array.map (String.join "\n") rawListItems

                isLooseList =
                    Array.any (\a -> Array.length a > 1) rawListItems

                block =
                    if isLooseList then
                        UnorderedLooseList (Array.map (String.trim >> parse >> Result.withDefault []) listItems)
                    else
                        UnorderedTightList (Array.map (String.trim >> Markdown.Parser.Inlines.parse >> Result.withDefault []) listItems)
            in
            add block



-- RAW PARSER (1 level below top)


{-| Raw block parser.
-}
rawBlockParser : Array RawBlock -> Parser (Step (Array RawBlock) (Array RawBlock))
rawBlockParser blocks =
    let
        block =
            map (\b -> Loop (Array.pushLast b blocks))

        addBlocks =
            map (\b -> Loop (blocks ++ b))

        lastBlockWasFinishedParagraphOrSomethingElse =
            when Array.popLast blocks is
                Just { last = RawParagraph { closed } } ->
                    closed

                _ ->
                    True

        skip =
            problem ""

        cannotInterruptParagraph p =
            if lastBlockWasFinishedParagraphOrSomethingElse then
                p
            else
                skip

        lastBlock =
            Array.last blocks

        isPartOfListParser leadingSpaces items =
            items
                |> Array.last
                |> Maybe.andThen Array.first
                |> Maybe.map
                        (\line ->
                            let
                                lineIndent =
                                    String.unitLength line - String.unitLength (String.trimLeft line)

                                totalSpacesNeeded =
                                    leadingSpaces + 2 + lineIndent
                            in
                            succeed identity
                                |. specificAmountOf totalSpacesNeeded (specificChar ' ')
                                |= getChompedString (chompUntilEndOr "\n")
                                |. oneOf
                                        [ symbol "\n"
                                        , end
                                        ]
                                |> identity
                        )
                |> Maybe.withDefault (problem "")
                |> andThen
                        (\line ->
                            when Array.popLast items is
                                Just { last, initial } ->
                                    last
                                        |> Array.pushLast line
                                        |> (\a -> Array.pushLast a initial)
                                        |> succeed

                                Nothing ->
                                    problem ""
                        )
                |> backtrackable
    in
    oneOf
        [ -- Check if we reached the end
          map (\_ -> Done blocks) end

        ,
        when Array.popLast blocks is
            Just { last = RawOrderedList { leadingSpaces, start, symbol, rawListItems }, initial } ->
                rawListItems
                    |> isPartOfListParser leadingSpaces
                    |> map (\newItems -> RawOrderedList
                        { leadingSpaces = leadingSpaces
                        , start = start
                        , symbol = symbol
                        , rawListItems = newItems
                        })
                    |> map (\a -> Array.pushLast a initial)
                    |> map Loop

            Just { last = RawUnorderedList { leadingSpaces, symbol, rawListItems }, initial } ->
                rawListItems
                    |> isPartOfListParser leadingSpaces
                    |> map (\newItems -> RawUnorderedList
                        { leadingSpaces = leadingSpaces
                        , symbol = symbol
                        , rawListItems = newItems
                        })
                    |> map (\a -> Array.pushLast a initial)
                    |> map Loop


            _ ->
                problem ""

        , --
          block (backtrackable (cannotInterruptParagraph headingParser))
        , block (backtrackable blockQuoteParser)
        , block (backtrackable thematicBreakParser)

        , -- Unordered list
          succeed (unorderedListManager blocks) |= backtrackable unorderedListParser

        , -- Ordered list
          succeed (orderedListManager blocks) |= backtrackable orderedListParser

        , -- Fenced code
          block (backtrackable fencedCodeParser)

        , -- Indented code
          when lastBlock is
            Just (RawHtmlOpening _) ->
                problem ""

            Just (RawHtmlText _) ->
                problem ""

            _ ->
                succeed
                    (\line ->
                        when Array.popLast blocks is
                            Just { last = RawIndentedCode ic, initial } ->
                                initial
                                    |> Array.pushLast (RawIndentedCode (ic ++ "\n" ++ line))
                                    |> Loop

                            _ ->
                                blocks
                                    |> Array.pushLast (RawIndentedCode line)
                                    |> Loop
                    )
                    |= backtrackable (cannotInterruptParagraph indentedCodeParser)

        , -- HTML: 1
          Html.nonRecursiveNodeParser
            |> withOptionalLeadingSpaces
            |> andThen
                    (\html ->
                        when html is
                            Html.Node { properties, attributes, descendants } ->
                                succeed
                                    [ RawHtmlOpening
                                        { tagName = properties.tagName
                                        , attributes = Html.attributesToDictionary attributes
                                        , closed = False
                                        , source = ""
                                        }

                                    , --
                                    (when descendants is
                                        Html.Regular array ->
                                            array
                                    )
                                        |> Html.arrayToString
                                        |> Text
                                        |> Inline
                                        |> RawBlock

                                    , --
                                    RawHtmlClosing
                                        { tagName = properties.tagName
                                        , source = ""
                                        }
                                    ]

                            _ ->
                                problem ""
                    )
            |> backtrackable
            |> addBlocks

        , -- 2 -> 5
          Html.nonNodeParser
            |> map RawHtml
            |> block

        , -- 6
          [ map RawHtmlOpening (isHtmlType6 (backtrackable Html.openingParser))
          , map RawHtmlClosing (isHtmlType6 (backtrackable Html.closingParser))
          ]
            |> oneOf
            |> withOptionalLeadingSpaces
            |> backtrackable
            |> block

        , -- 7
          [ map RawHtmlOpening (isHtmlType7 (backtrackable Html.openingParser))
          , map RawHtmlClosing (isHtmlType7 (backtrackable Html.closingParser))
          ]
            |> oneOf
            |> withOptionalLeadingSpaces
            |> cannotInterruptParagraph
            |> backtrackable
            |> block

        , -- If all fails, then it's inline text or a paragraph.
          -- Try parsing one line at a time.
          succeed
            (\line ->
                when Array.popLast blocks is
                    Just { last = RawHtmlOpening _ } ->
                        -- if line == "" then
                        --     Loop blocks
                        -- else
                        blocks
                            |> Array.pushLast (RawHtmlText line)
                            |> Loop

                    Just { last = RawHtmlText text, initial } ->
                        initial
                            |> Array.pushLast (RawHtmlText (text ++ "\n" ++ line))
                            |> Loop

                    Just { last = RawParagraph { closed = False, string = par }, initial } ->
                        if String.endsWith "\n" par then
                            initial
                                |> Array.pushLast (RawParagraph { closed = True, string = String.dropLast 1 par })
                                |> Array.pushLast (RawParagraph { closed = False, string = line })
                                |> Loop
                        else if par == "" then
                            initial
                                |> Array.pushLast (RawParagraph { closed = False, string = line })
                                |> Loop
                        else if line == "" then
                            initial
                                |> Array.pushLast (RawParagraph { closed = True, string = par })
                                |> Loop
                        else
                            initial
                                |> Array.pushLast (RawParagraph { closed = False, string = par ++ "\n" ++ line })
                                |> Loop


                    _ ->
                        if line == "" then
                            Loop blocks
                        else
                            blocks
                                |> Array.pushLast (RawParagraph { closed = False, string = line })
                                |> Loop
            )
            |. many (specificChar ' ')
            |= getChompedString (chompUntilEndOr "\n")
            |. oneOf
                    [ chompIf isLineEnding
                    , end
                    ]
        ]



-- INDIVIDUAL PARSERS


blockQuoteParser : Parser RawBlock
blockQuoteParser =
    succeed identity
        |. notMoreThanXSpaces 3
        |. specificChar '>'
        |= getChompedString (chompUntilEndOr "\n\n")
        |. spaces
        |> andThen
                (\string ->
                    -- Take out a single '>' from each line,
                    -- but only if it's led by no more than 3 spaces.
                    string
                        |> String.split "\n"
                        |> Array.map
                                (\line ->
                                    if String.startsWith "    " line then
                                        line
                                    else if String.startsWith ">" (String.trim line) then
                                        String.trim (String.dropFirst 1 (String.trim line))
                                    else
                                        String.trim line
                                )
                        |> String.join "\n"
                        |> RawBlockQuote
                        |> succeed
                )


fencedCodeParser : Parser RawBlock
fencedCodeParser =
    succeed identity
        |. notMoreThanXSpaces 3
        |= getChompedString
                (oneOf
                    [ symbol "```"
                    , symbol "~~~"
                    ]
                )
        |> andThen
                (\sym ->
                    let
                        char =
                            if sym == "~~~" then
                                '~'
                            else
                                '`'
                    in
                    succeed identity
                        |= many (specificChar char)
                        |> map (\chars -> String.fromArray (Array.repeat (3 + Array.length chars) char))
                )
        |> andThen
                (\opening ->
                    succeed identity
                        |= getChompedString (chompUntilEndOr "\n")
                        |> map
                                (\l ->
                                    { opening = opening
                                    , language =
                                        when Maybe.map String.trim (Array.first (String.split " " l)) is
                                            Just "" ->
                                                Nothing

                                            m ->
                                                m
                                    }
                                )
                )
        |> andThen
                (\{ opening, language } ->
                    succeed identity
                        |= getChompedString (chompUntilEndOr opening)
                        |. symbol opening
                        |> map
                                (\string ->
                                    let
                                        lines =
                                            String.split "\n" string

                                        formattedLines =
                                            when Array.popLast lines is
                                                Just { last, initial } ->
                                                    Array.dropFirst 1 initial

                                                Nothing ->
                                                    []
                                    in
                                    RawFencedCode
                                        { body = String.join "\n" formattedLines
                                        , language = language
                                        }
                                )
                )


indentedCodeParser : Parser String
indentedCodeParser =
    succeed identity
        |. symbol "    "
        |= getChompedString (chompUntilEndOr "\n")
        |. chompIf isLineEnding
        |> identity


headingParser : Parser RawBlock
headingParser =
    succeed (\level string ->
        RawHeading
            { level = level
            , string = string
            }
    )
        |. notMoreThanXSpaces 3
        |= (some (specificChar '#')
            |> map (\{ rest } -> 1 + Array.length rest)
            |> andThen (\level ->
                if level > 6 then
                    problem "Headers only go up to 6"
                else
                    succeed level
            ))
        |. some (specificChar ' ')
        |= getChompedString (chompUntilEndOr "\n")
        |. oneOf
            [ end
            , spaces
            ]



orderedListManager :
    Array RawBlock
    -> { leadingSpaces : Int
        , line : String
        , start : Int
        , symbol : String
        }
    -> Step (Array RawBlock) (Array RawBlock)
orderedListManager blocks list =
    let
        props =
            { leadingSpaces = list.leadingSpaces
            , start = list.start
            , symbol = list.symbol
            }
    in
    when Array.popLast blocks is
        Just { last = RawOrderedList { leadingSpaces, start, symbol, rawListItems }, initial } ->
            lastBlockWasList
                (\properties items -> RawOrderedList
                    { leadingSpaces = properties.leadingSpaces
                    , start = properties.start
                    , symbol = properties.symbol
                    , rawListItems = items
                    })
                { currentList =
                    { props =
                        { leadingSpaces = props.leadingSpaces
                        , start = props.start
                        , symbol = props.symbol
                        , rawListItems = []
                        }
                    , line = list.line
                    }
                , lastList =
                    { items = rawListItems
                    , props =
                        { leadingSpaces = leadingSpaces
                        , start = start
                        , symbol = symbol
                        , rawListItems = []
                        }
                    }
                , allBlocksExceptLast = initial
                , allBlocks = blocks
                }

        _ ->
            Loop (Array.pushLast
                (RawOrderedList
                    { leadingSpaces = props.leadingSpaces
                    , start = props.start
                    , symbol = props.symbol
                    , rawListItems = Array.singleton (Array.singleton list.line)
                    }
                )
                blocks
            )




orderedListParser :
    Parser
        { leadingSpaces : Int
        , line : String
        , start : Int
        , symbol : String
        }
orderedListParser =
    succeed identity
        |= many (specificChar ' ')
        |> andThen
                (\leadingSpaces ->
                    if Array.length leadingSpaces > 3 then
                        problem "Cannot have more than 3 leading spaces"
                    else
                        succeed identity
                            |= getChompedString (chompOneOrMore Char.isDigit)
                            |> andThen
                                    (\string ->
                                        when String.toInt string is
                                            Just int ->
                                                succeed int

                                            Nothing ->
                                                problem "Couldn\'t parse string as number"
                                    )
                            |> andThen
                                    (\start ->
                                        succeed identity
                                            |. oneOf
                                                    [ specificChar '.'
                                                    , specificChar ')'
                                                    ]
                                            |. specificChar ' '
                                            |> getChompedString
                                            |> map
                                                    (\s ->
                                                        { start = start
                                                        , symbol = s
                                                        }
                                                    )
                                    )
                            |> andThen
                                    (\{ start, symbol } ->
                                        succeed identity
                                            |= getChompedString (chompUntilEndOr "\n")
                                            |. chompIf isLineEnding
                                            |> map
                                                    (\line ->
                                                        { leadingSpaces = Array.length leadingSpaces
                                                        , line = line
                                                        , start = start
                                                        , symbol = symbol
                                                        }
                                                    )
                                    )
                )


thematicBreakParser : Parser RawBlock
thematicBreakParser =
    succeed identity
        |. notMoreThanXSpaces 3
        |= oneOf
                [ specificChar '-'
                , specificChar '_'
                , specificChar '*'
                ]
        |> andThen
                (\openingChar ->
                    let
                        term =
                            String.fromArray (Array.repeat 2 openingChar)
                    in
                    succeed identity
                        |= getChompedString (chompUntilEndOr "\n")
                        |. spaces
                        |> andThen
                                (\text ->
                                    if String.startsWith term text then
                                        succeed RawThematicBreak
                                    else
                                        problem "Not a thematic break"
                                )
                )


unorderedListManager :
    Array RawBlock
    -> { leadingSpaces : Int
        , line : String
        , symbol : String
        }
    -> Step (Array RawBlock) (Array RawBlock)
unorderedListManager blocks list =
    when Array.popLast blocks is
        Just { last = RawUnorderedList { leadingSpaces, symbol, rawListItems }, initial } ->
            -- Previous list exists
            lastBlockWasList
                (\props items -> RawUnorderedList { leadingSpaces = props.leadingSpaces, symbol = props.symbol, rawListItems = items })
                { currentList =
                    { props =
                        { leadingSpaces = list.leadingSpaces
                        , symbol = list.symbol
                        , rawListItems = []
                        }
                    , line = list.line
                    }
                , lastList =
                    { items = rawListItems
                    , props =
                        { leadingSpaces = leadingSpaces
                        , symbol = symbol
                        , rawListItems = []
                        }
                    }
                , allBlocksExceptLast = initial
                , allBlocks = blocks
                }

        _ ->
            -- New list
            Loop (Array.pushLast
                (RawUnorderedList
                    { leadingSpaces = list.leadingSpaces
                    , symbol = list.symbol
                    , rawListItems = Array.singleton (Array.singleton list.line)
                    }
                )
                blocks
            )



unorderedListParser :
    Parser
        { leadingSpaces : Int
        , line : String
        , symbol : String
        }
unorderedListParser =
    succeed identity
        |= many (specificChar ' ')
        |> andThen
                (\leadingSpaces ->
                    if Array.length leadingSpaces > 3 then
                        problem "Cannot have more than 3 leading spaces"
                    else
                        succeed identity
                            |= oneOf
                                    [ specificChar '-'
                                    , specificChar '+'
                                    , specificChar '*'
                                    ]
                            |. specificChar ' '
                            |> andThen
                                    (\listChar ->
                                        succeed identity
                                            |= getChompedString (chompUntilEndOr "\n")
                                            |. oneOf
                                                    [ chompIf isLineEnding
                                                    , end
                                                    ]
                                            |> map
                                                    (\line ->
                                                        { leadingSpaces = Array.length leadingSpaces
                                                        , line = line
                                                        , symbol = String.fromArray (Array.singleton listChar)
                                                        }
                                                    )
                                    )
                )



-- LISTS


lastBlockWasList :
    ({ props
        | leadingSpaces : Int
        , symbol : String
     }
     -> Array (Array String)
     -> RawBlock
    )
    -> { currentList :
            { props :
                { props
                    | leadingSpaces : Int
                    , symbol : String
                }
            , line : String
            }
       , lastList :
            { props :
                { props
                    | leadingSpaces : Int
                    , symbol : String
                }
            , items : Array (Array String)
            }
       , allBlocksExceptLast : Array RawBlock
       , allBlocks : Array RawBlock
       }
    -> Step (Array RawBlock) (Array RawBlock)
lastBlockWasList constructor { currentList, lastList, allBlocksExceptLast, allBlocks } =
    let
        addToBlocks l b =
            Loop (Array.pushLast b l)

        addToSameList =
            constructor lastList.props >> addToBlocks allBlocksExceptLast

        formattedLine =
            if currentList.props.leadingSpaces > 0 then
                currentList.props.symbol ++ " " ++ currentList.line
            else
                currentList.line

        wrapLine =
            Array.singleton >> Array.singleton
    in
    if currentList.props.leadingSpaces >= lastList.props.leadingSpaces + String.unitLength lastList.props.symbol then
        -- Content belongs to previous list item
        when Array.popLast lastList.items is
            Just { last = lastItem, initial = otherItems } ->
                lastItem
                    |> Array.pushLast formattedLine
                    |> (\newLines -> Array.pushLast newLines otherItems)
                    |> addToSameList

            Nothing ->
                formattedLine
                    |> wrapLine
                    |> addToSameList
    else if currentList.props.symbol == lastList.props.symbol then
        -- Same list, new item
        lastList.items
            |> Array.pushLast (Array.singleton currentList.line)
            |> addToSameList
    else
        -- New list
        currentList.line
            |> wrapLine
            |> constructor currentList.props
            |> addToBlocks allBlocks



-- ㊙️


htmlType6TagNames =
    [ "address"
    , "article"
    , "aside"
    , "base"
    , "basefont"
    , "blockquote"
    , "body"
    , "caption"
    , "center"
    , "col"
    , "colgroup"
    , "dd"
    , "details"
    , "dialog"
    , "dir"
    , "div"
    , "dl"
    , "dt"
    , "fieldset"
    , "figcaption"
    , "figure"
    , "footer"
    , "form"
    , "frame"
    , "frameset"
    , "h1"
    , "h2"
    , "h3"
    , "h4"
    , "h5"
    , "h6"
    , "head"
    , "header"
    , "hr"
    , "html"
    , "iframe"
    , "legend"
    , "li"
    , "link"
    , "main"
    , "menu"
    , "menuitem"
    , "nav"
    , "noframes"
    , "ol"
    , "optgroup"
    , "option"
    , "p"
    , "param"
    , "section"
    , "source"
    , "summary"
    , "table"
    , "tbody"
    , "td"
    , "tfoot"
    , "th"
    , "thead"
    , "title"
    , "tr"
    , "track"
    , "ul"
    ]


isClosed =
    { closed = True
    }


isOpen =
    { closed = False
    }


isHtmlType6 =
    andThen
        (\a ->
            if Array.member a.tagName htmlType6TagNames then
                succeed a
            else
                problem ""
        )


isHtmlType7 =
    andThen
        (\a ->
            if
                Array.member
                    a.tagName
                    [ "pre"
                    , "script"
                    , "style"
                    , "textarea"
                    ]
                    == False
            then
                succeed a
            else
                problem ""
        )
